// returns TRUE if tree contains value; 
// or returns FALSE
function hasValue(Node, value) {
    let current = Node;

    while (value !== Node.data) {
        if (value < Node.data) {
            current = Node.left;
        } else if (value > Node.data) {
            current = Node.right;
        }
    }

    if (value === Node.data) {
        return true;
    } else if (value !== Node.data && !Node.left && !Node.right) {
        return false;
    } else {
        const err = "error";
        return err;
    }
}


// returns "tree-tier" where value is located, meaning
// returns how many navigations, left or right, + 1 to
// locate value in tree; or returns "not found"
function height(Node, value) {
    let tier = 1;
    let current = Node;

    while (value !== Node.data) {
        if (value < Node.data) {
            current = Node.left;
            tier++;
        } else if (value > Node.data) {
            current = Node.right;
            tier++
        }
    }

    if (value === Node.data) {
        return tier;
    } else if (value !== Node.data && !Node.left && !Node.right) {
        const err = "Value not found";
        return err;
    } else {
        const err = "error";
        return err;
    }
}


// returns a Node containing value;
// or returns UNDEFINED
function find(Node, value) {
    let current = Node;

    while (value !== Node.data) {
        if (value < Node.data) {
            current = Node.left;
        } else if (value > Node.data) {
            current = Node.right;
        }
    }

    if (value === Node.data) {
        return Node;
    } else if (value !== Node.data && !Node.left && !Node.right) {
        return undefined;
    } else {
        const err = "error";
        return err;
    }
}

